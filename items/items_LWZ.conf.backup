# items/LWZ_.conf
[thz]
# plugin status
	[[comPortStatus]]
		type = num
		thz = comPortStatus
	[[comPortReopenAttempts]]
		type = num
		thz = comPortReopenAttempts
	[[rxCount]]
		type = num
		thz = rxCount
	[[txCount]]
		type = num
		thz = txCount
	[[rxChecksumErrorCount]]
		type = num
		thz = rxChecksumErrorCount
	[[rxNackCount]]
		type = num
		thz = rxNackCount
	[[rxTimeoutCount]]
		type = num
		thz = rxTimeoutCount
	[[rxFramingErrorCount]]
		type = num
		thz = rxFramingErrorCount
	[[logRegister]]
		type = str
		thz = logRegister
	[[logFullScan]]
		type = str
		thz = logFullScan

# read-only parameters
[LWZ]
# Aussentemp
	[[outsideTemp]]
		type = num
		thz = outsideTemp 
		sqlite = init
# Raumtemp
	[[roomTempRC]]
		type = num
		thz = roomTempRC
# Vorlauftemperatur
	[[flowTemp]]
		type = num
		thz = flowTemp
		sqlite = init
# Ruecklauftemp
	[[returnTemp]]
		type = num
		thz = returnTemp
		sqlite = init
# Warmwasser Temp IST
	[[dhwTemp]]
		type = num
		thz = dhwTemp
		sqlite = init
# Warmwasserbereitung
	[[dhwPumpOn]]
		type = bool
		thz = dhwPumpOn
		sqlite = init
# Heizstab Warmwasser
	[[boostDHWTotal]]
		type = num
		thz = boostDHWTotal
		sqlite = init
# Heizstab Heating Cycle Heizung
	[[boostHCTotal]]
		type = num
		thz = boostHCTotal
		sqlite = init
# Warmwasser Tag
	[[heatDHWDay]]
		type = num
		thz = heatDHWDay
		sqlite = init
# Warmwasser Gesamt
	[[heatDHWTotal]]
		type = num
		thz = heatDHWTotal
		sqlite = init
# Heizen Tag
	[[heatHCDay]]
		type = num
		thz = heatHCDay
		sqlite = init
# Heizen Gesamt
	[[heatHCTotal]]
		type = num
		thz = heatHCTotal
		sqlite = init
# Warmwasser Tag Energie
	[[ePowerDHWDay]]
		type = num
		thz = ePowerDHWDay
		sqlite = yes
		cache = yes
		[[[Prozent]]]
			type = num
			eval = round(((sh.LWZ.ePowerDHWDay() / sh.EZ.Bedarf.Heute()) * 100), 1)
			eval_trigger = LWZ.ePowerDHWDay | EZ.Bedarf.Heute
			sqlite = yes
			cache = yes
# Warmwasser Gesamt Energie
	[[ePowerDHWTotal]]
		type = num
		thz = ePowerDHWTotal
		sqlite = yes
		cache = yes
		[[[Gestern]]]
			type = num
			eval = sh.LWZ.ePowerDHWTotal.db('min', sh.minute.since.midnight.dbstr()) - sh.LWZ.ePowerDHWTotal.db('min', str(sh.minute.since.midnight() + 1440) + 'i', sh.minute.since.midnight.dbstr())
			eval_trigger = LWZ.ePowerDHWTotal
			crontab = 1 0 * * = 1
			sqlite = yes
			cache = yes
			[[[[Prozent]]]]
				type = num
				eval = round(((sh.LWZ.ePowerDHWTotal.Gestern() / sh.EZ.Bedarf.Gestern()) * 100), 1)
				eval_trigger = LWZ.ePowerDHWTotal.Gestern | EZ.Bedarf.Gestern
				sqlite = yes
				cache = yes
		[[[Vorgestern]]]
			type = num
			eval = sh.LWZ.ePowerDHWTotal.db('min', str(sh.minute.since.midnight() + 1440) + 'i', sh.minute.since.midnight.dbstr()) - sh.LWZ.ePowerDHWTotal.db('min', str(sh.minute.since.midnight() + 2880) + 'i', str(sh.minute.since.midnight() + 1440) + 'i')
			eval_trigger = LWZ.ePowerDHWTotal
			crontab = 1 0 * * = 1
			sqlite = yes
			cache = yes
			[[[[Prozent]]]]
				type = num
				eval = round(((sh.LWZ.ePowerDHWTotal.Vorgestern() / sh.EZ.Bedarf.Vorgestern()) * 100), 1)
				eval_trigger = LWZ.ePowerDHWTotal.Gestern | EZ.Bedarf.Gestern
				sqlite = yes
				cache = yes
		[[[Woche]]]
			type = num
			eval = sh.LWZ.ePowerDHWTotal() - sh.LWZ.ePowerDHWTotal.db('min', sh.minute.since.week.dbstr())
			eval_trigger = LWZ.ePowerDHWTotal
			sqlite = yes
			cache = yes
			[[[[Prozent]]]]
				type = num
				eval = round(((sh.LWZ.ePowerDHWTotal.Woche() / sh.EZ.Bedarf.Woche()) * 100), 1)
				eval_trigger = LWZ.ePowerDHWTotal.Woche | EZ.Bedarf.Woche
				sqlite = yes
				cache = yes
		[[[Vorwoche]]]
			type = num
			eval = sh.LWZ.ePowerDHWTotal.db('min', sh.minute.since.week.dbstr()) - sh.LWZ.ePowerDHWTotal.db('min', str(sh.minute.since.week() + 10080) + 'i', sh.minute.since.week.dbstr())
			eval_trigger = LWZ.ePowerDHWTotal
			crontab = 1 0 * 6 = 1
			sqlite = yes
			cache = yes
			[[[[Prozent]]]]
				type = num
				eval = round(((sh.LWZ.ePowerDHWTotal.Vorwoche() / sh.EZ.Bedarf.Vorwoche()) * 100), 1)
				eval_trigger = LWZ.ePowerDHWTotal.Vorwoche | EZ.Bedarf.Vorwoche
				sqlite = yes
				cache = yes
		[[[Monat]]]
			type = num
			eval = sh.LWZ.ePowerDHWTotal() - sh.LWZ.ePowerDHWTotal.db('min', str(sh.hour.since.month()) + 'h')
			eval_trigger = LWZ.ePowerDHWTotal
			sqlite = yes
			cache = yes
			[[[[Prozent]]]]
				type = num
				eval = round(((sh.LWZ.ePowerDHWTotal.Monat() / sh.EZ.Bedarf.Monat()) * 100), 1)
				eval_trigger = LWZ.ePowerDHWTotal.Monat | EZ.Bedarf.Monat
				sqlite = yes
				cache = yes
		[[[Vormonat]]]
			type = num
			eval = sh.LWZ.ePowerDHWTotal.db('min', str(sh.hour.since.month()) + 'h') - sh.LWZ.ePowerDHWTotal.db('min', str(sh.hour.since.month() + 730) + 'h', str(sh.hour.since.month()) + 'h')
			eval_trigger = LWZ.ePowerDHWTotal
			crontab = 1 0 1 * = 1
			sqlite = yes
			cache = yes
			[[[[Prozent]]]]
				type = num
				eval = round(((sh.LWZ.ePowerDHWTotal.Vormonat() / sh.EZ.Bedarf.Vormonat()) * 100), 1)
				eval_trigger = LWZ.ePowerDHWTotal.Vormonat | EZ.Bedarf.Vormonat
				sqlite = yes
				cache = yes
# Heizen Tag Energie
	[[ePowerHCDay]]
		type = num
		thz = ePowerHCDay
		sqlite = yes
		cache = yes
		[[[Prozent]]]
			type = num
			eval = round(((sh.LWZ.ePowerHCDay() / sh.EZ.Bedarf.Heute()) * 100), 1)
			eval_trigger = LWZ.ePowerHCDay | EZ.Bedarf.Heute
			sqlite = yes
			cache = yes
# Heizen Gesamt Energie
	[[ePowerHCTotal]]
		type = num
		thz = ePowerHCTotal
		sqlite = yes
		cache = yes
		[[[Gestern]]]
			type = num
			eval = sh.LWZ.ePowerHCTotal.db('min', sh.minute.since.midnight.dbstr()) - sh.LWZ.ePowerHCTotal.db('min', str(sh.minute.since.midnight() + 1440) + 'i', sh.minute.since.midnight.dbstr())
			eval_trigger = LWZ.ePowerHCTotal
			crontab = 1 0 * * = 1
			sqlite = yes
			cache = yes
			[[[[Prozent]]]]
				type = num
				eval = round(((sh.LWZ.ePowerHCTotal.Gestern() / sh.EZ.Bedarf.Gestern()) * 100), 1)
				eval_trigger = LWZ.ePowerHCTotal.Gestern | EZ.Bedarf.Gestern
				sqlite = yes
				cache = yes
		[[[Vorgestern]]]
			type = num
			eval = sh.LWZ.ePowerHCTotal.db('min', str(sh.minute.since.midnight() + 1440) + 'i', sh.minute.since.midnight.dbstr()) - sh.LWZ.ePowerHCTotal.db('min', str(sh.minute.since.midnight() + 2880) + 'i', str(sh.minute.since.midnight() + 1440) + 'i')
			eval_trigger = LWZ.ePowerHCTotal
			crontab = 1 0 * * = 1
			sqlite = yes
			cache = yes
			[[[[Prozent]]]]
				type = num
				eval = round(((sh.LWZ.ePowerHCTotal.Vorgestern() / sh.EZ.Bedarf.Vorgestern()) * 100), 1)
				eval_trigger = LWZ.ePowerHCTotal.Vorgestern | EZ.Bedarf.Vorgestern
				sqlite = yes
				cache = yes
		[[[Woche]]]
			type = num
			eval = sh.LWZ.ePowerHCTotal() - sh.LWZ.ePowerHCTotal.db('min', sh.minute.since.week.dbstr())
			eval_trigger = LWZ.ePowerHCTotal
			sqlite = yes
			cache = yes
			[[[[Prozent]]]]
				type = num
				eval = round(((sh.LWZ.ePowerHCTotal.Woche() / sh.EZ.Bedarf.Woche()) * 100), 1)
				eval_trigger = LWZ.ePowerHCTotal.Woche | EZ.Bedarf.Woche
				sqlite = yes
				cache = yes
		[[[Vorwoche]]]
			type = num
			eval = sh.LWZ.ePowerHCTotal.db('min', sh.minute.since.week.dbstr()) - sh.LWZ.ePowerHCTotal.db('min', str(sh.minute.since.week() + 10080) + 'i', sh.minute.since.week.dbstr())
			eval_trigger = LWZ.ePowerHCTotal
			crontab = 1 0 * 6 = 1
			sqlite = yes
			cache = yes
			[[[[Prozent]]]]
				type = num
				eval = round(((sh.LWZ.ePowerHCTotal.Vorwoche() / sh.EZ.Bedarf.Vorwoche()) * 100), 1)
				eval_trigger = LWZ.ePowerHCTotal.Vorwoche | EZ.Bedarf.Vorwoche
				sqlite = yes
				cache = yes
		[[[Monat]]]
			type = num
			eval = sh.LWZ.ePowerHCTotal() - sh.LWZ.ePowerHCTotal.db('min', str(sh.hour.since.month()) + 'h')
			eval_trigger = LWZ.ePowerHCTotal
			sqlite = yes
			cache = yes
			[[[[Prozent]]]]
				type = num
				eval = round(((sh.LWZ.ePowerHCTotal.Monat() / sh.EZ.Bedarf.Monat()) * 100), 1)
				eval_trigger = LWZ.ePowerHCTotal.Monat | EZ.Bedarf.Monat
				sqlite = yes
				cache = yes
		[[[Vormonat]]]
			type = num
			eval = sh.LWZ.ePowerHCTotal.db('min', str(sh.hour.since.month()) + 'h') - sh.LWZ.ePowerHCTotal.db('min', str(sh.hour.since.month() + 730) + 'h', str(sh.hour.since.month()) + 'h')
			eval_trigger = LWZ.ePowerHCTotal
			crontab = 1 0 1 * = 1
			sqlite = yes
			cache = yes
			[[[[Prozent]]]]
				type = num
				eval = round(((sh.LWZ.ePowerHCTotal.Vormonat() / sh.EZ.Bedarf.Vormonat()) * 100), 1)
				eval_trigger = LWZ.ePowerHCTotal.Vormonat | EZ.Bedarf.Vormonat
				sqlite = yes
				cache = yes
# heatingCircuitPumpOn - Heizkreis1-Pumpe an
	[[heatingCircuitPumpOn]]
		type = bool
		thz = heatingCircuitPumpOn
		sqlite = init
# compressorOn - Verdichter an
	[[compressorOn]]
		type = bool
		thz = compressorOn
		sqlite = init
# boosterStage1On - Heizstab Stufe 1
	[[boosterStage1On]]
		type = bool
		thz = boosterStage1On
		sqlite = init
# boosterStage2On - Heizstab Stufe 2
	[[boosterStage2On]]
		type = bool
		thz = boosterStage2On
		sqlite = init
# boosterStage3On - Heizstab Stufe 3
	[[boosterStage3On]]
		type = bool
		thz = boosterStage3On
		sqlite = init
# relHumidity - relative Luftfeuchtigkeit nur mit vorhandener Fernbedienung
	[[relHumidity]]
		type = num
		thz = relHumidity
		sqlite = init
# compressorHeatingCycles - Verdichterlaufzeit zum Heizen Stunden
	[[compressorHeatingCycles]]
		type = num
		thz = compressorHeatingCycles
		sqlite = init
# compressorCoolingCycles - Verdichterlaufzeit zum Kuehlen Stunden
	[[compressorCoolingCycles]]
		type = num
		thz = compressorCoolingCycles
		sqlite = init
# compressorDHWCycles - Verdichterlaufzeit zur WW-Erwaermung Stunden
	[[compressorDHWCycles]]
		type = num
		thz = compressorDHWCycles
		sqlite = init
# boosterDHWCycles - Heizstablaufzeit zur WW-Erwaermung Stunden
	[[boosterDHWCycles]]
		type = num
		thz = boosterDHWCycles
		sqlite = init
# boosterHeatingCycles - Heizstablaufzeit zum Heizen Stunden
	[[boosterHeatingCycles]]
		type = num
		thz = boosterHeatingCycles
		sqlite = init
# dhwSetTemp - WW-Solltemperatur
	[[dhwSetTemp]]
		type = num
		thz = dhwSetTemp
		sqlite = init
# heatSetTempHC1 - HK1-Solltemperatur
	[[heatSetTempHC1]]
		type = num
		thz = heatSetTempHC1
		sqlite = init
# heatTempHC1 - HK1-Isttemperatur
	[[heatTempHC1]]
		type = num
		thz = heatTempHC1
		sqlite = init
# pOpMode - Betriebsmodus Anlage
	[[pOpMode]]
		type = str
		thz = pOpMode
# p07FanStageDay - Luefterstufe Tagbetrieb
	[[p07FanStageDay]]
		type = num
		thz = p07FanStageDay
		visu_acl = rw
		enforce_updates = true
# p08FanStageNight - Luefterstufe Nachtbetrieb
	[[p08FanStageNight]]
		type = num
		thz = p08FanStageNight
		visu_acl = rw
		enforce_updates = true
# p99FanStageParty - Luefterstufe Party
	[[p99FanStageParty]]
		type = num
		thz = p99FanStageParty
# Anzahl Fehlercodes
	[[numberOfFaults]]
		type = num
		thz = numberOfFaults
# momentane elektriche Leistung Schaetzwert
	[[actualPower_Pel]]
		type = num
		thz = actualPower_Pel
	[[KWLParty]]
		type = bool
		knx_dpt = 1
		visu_acl = rw
		enforce_updates = true
		autotimer = 20m = 0
		[[[UZSU]]]
			type = dict
			uzsu_item = LWZ.KWLParty
			visu_acl = rw
			cache = True
	[[iconCompressor]]
		# Icon "Verdichter"
		type = bool
		thz = iconCompressor
	[[iconHeating]]
		# Icon "Heizen"
		type = bool
		thz = iconHeating
	[[iconDHW]]
		# Icon "Warmwasserbereitung"
		type = bool
		thz = iconDHW
	[[iconBooster]]
		# Icon "elektrische Nachheizstufen"
		type = bool
		thz = iconBooster
	[[iconBothFilters]]
		# Icon "Filterwechsel oben und unten"
		type = bool
		thz = iconBothFilters
	[[iconCirculationPump]]
		# Icon "Heizkreispumpe"
		type = bool
		thz = iconCirculationPump
	[[iconUpperFilter]]
		# Icon "Filterwechsel oben"
		type = bool
		thz = iconUpperFilter
	[[iconLowerFilter]]
		# Icon "Filterwechsel unten"
		type = bool
		thz = iconLowerFilter
	[[p04DHWsetDayTemp]]
		type = num
		thz = p04DHWsetDayTemp
		visu_acl = rw
		enforce_updates = true
	[[p05DHWsetNightTemp]]
		type = num
		thz = p05DHWsetNightTemp
		visu_acl = rw
		enforce_updates = true

	[[p01RoomTempDayHC1]]
		type = num
		thz = p01RoomTempDayHC1
	[[p02RoomTempNightHC1]]
		type = num
		thz = p02RoomTempNightHC1
	[[p49SummerModeTemp]]
		type = num
		thz = p49SummerModeTemp
	[[p50SummerModeHysteresis]]
		type = num
		thz = p50SummerModeHysteresis

# Cooling parameters
    [[p99CoolingSwitch]]
        type = num
        thz = p99CoolingSwitch
	[[p01RoomTempDayHC1SummerMode]]
		type = num
		thz = p01RoomTempDayHC1SummerMode
	[[p02RoomTempNightHC1SummerMode]]
		type = num
		thz = p02RoomTempNightHC1SummerMode