# items/pv.conf
[solar]
	[[status]]
		type = str
		kostal = status
		[[[EinAus]]]
			type = bool
			eval = 1 if sh.solar.status() == 'Einspeisen MPP' else 0
			eval_trigger = solar.status
			enforce_updates = True
	[[current]]
		type = num
		kostal = power_current
		sqlite = yes
		[[[MAX]]]
			type = num
			eval = "sh.solar.current.db('max', '12h')"
			eval_trigger = solar.current
			visu_acl = rw
			sqlite = yes
	[[total]]
		type = num
		kostal = power_total
		sqlite = yes
		[[[Ablesung]]]
			type = num
			value = 10628
		[[[Jahreszaehler]]]
			type = num
			eval = sh.solar.total() - sh.solar.total.Ablesung()
			eval_trigger = solar.total
			sqlite = yes
			cache = yes
			[[[[Prozent]]]]
				type = num
				eval = round(((sh.solar.total.Jahreszaehler() / 3420) * 100), 1)
				eval_trigger = solar.total
				sqlite = yes
				cache = yes
		[[[Eigen]]]
			type = num
			eval = sh.solar.total.Jahreszaehler() - sh.EZ.E_Minus.Jahreszaehler()
			eval_trigger = solar.total
			sqlite = yes
			cache = yes
			[[[[Prozent]]]]
				type = num
				eval = round(((sh.solar.total.Eigen() / sh.solar.total.Jahreszaehler()) * 100), 1)
				eval_trigger = solar.total
				sqlite = yes
				cache = yes
		[[[Heute]]]
			type = num
			eval = sh.EZ.E_Plus() - sh.EZ.E_Plus.db('min', sh.minute.since.midnight.dbstr())
			eval_trigger = solar.total
			sqlite = yes
			cache = yes
		[[[Gestern]]]
			type = num
			eval = sh.solar.total.db('min', sh.minute.since.midnight.dbstr()) - sh.solar.total.db('min', str(sh.minute.since.midnight() + 1440) + 'i', sh.minute.since.midnight.dbstr())
			eval_trigger = solar.total
			crontab = 1 0 * * = 1
			sqlite = yes
			cache = yes
		[[[Vorgestern]]]
			type = num
			eval = sh.solar.total.db('min', str(sh.minute.since.midnight() + 1440) + 'i', sh.minute.since.midnight.dbstr()) - sh.solar.total.db('min', str(sh.minute.since.midnight() + 2880) + 'i', str(sh.minute.since.midnight() + 1440) + 'i')
			eval_trigger = solar.total
			crontab = 1 0 * * = 1
			sqlite = yes
			cache = yes
		[[[Woche]]]
			type = num
			eval = sh.solar.total() - sh.solar.total.db('min', sh.minute.since.week.dbstr())
			eval_trigger = solar.total
			sqlite = yes
			cache = yes
		[[[Vorwoche]]]
			type = num
			eval = sh.solar.total.db('min', sh.minute.since.week.dbstr()) - sh.solar.total.db('min', str(sh.minute.since.week() + 10080) + 'i', sh.minute.since.week.dbstr())
			eval_trigger = solar.total
			crontab = 1 0 * 6 = 1
			sqlite = yes
			cache = yes
		[[[Monat]]]
			type = num
			eval = sh.solar.total() - sh.solar.total.db('min', str(sh.hour.since.month()) + 'h')
			eval_trigger = solar.total
			sqlite = yes
			cache = yes
		[[[Vormonat]]]
			type = num
			eval = sh.solar.total.db('min', str(sh.hour.since.month()) + 'h') - sh.solar.total.db('min', str(sh.hour.since.month() + 730) + 'h', str(sh.hour.since.month()) + 'h')
			eval_trigger = solar.total
			crontab = 1 0 1 * = 1
			sqlite = yes
			cache = yes
	[[day]]
		type = num
		kostal = power_day
		sqlite = yes
		[[[Reset]]]
			type = num
			eval = sh.solar.day(0)
			crontab = 5 0 * * = 1
			visu_acl = rw
		[[[daybefore]]]
			type = num
			eval = "sh.solar.day.db('max', '1d', '1d')"
			eval_trigger = solar.day
			visu_acl = rw
			sqlite = yes
	[[Ertrag]]
		[[[AJahr]]]
			type = num
			sqlite = yes
			eval_trigger = solar.total
			eval = (sh.solar.total() % 3420)
			enforce_updates = true
		[[[xJahre]]]
			type = num
			sqlite = yes
			eval_trigger = solar.total | solar.Ertrag.AJahr
			eval = (sh.solar.total() - sh.solar.Ertrag.AJahr()) / 3420
			enforce_updates = true
			[[[[Datum]]]]
				type = foo
				eval = sh.solar.Ertrag.xJahre.last_change()
				eval_trigger = solar.Ertrag.xJahre
				enforce_updates = true